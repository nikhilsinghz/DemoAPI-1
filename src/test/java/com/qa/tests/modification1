package com.qa.tests;

import org.json.JSONObject;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.given;


import static org.hamcrest.Matchers.equalTo;

import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.Cookies;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.parsing.Parser;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;


public class LoginFlow {
	
	String BaseUrl = "http://35.157.221.79:5000";
	String ReturnUrl = ("/connect/authorize/callback?client_id=zelfstroomapp&scope=openid%20profile%20roles%20gateway_rights%20offline_access%20userId&response_type=code&redirect_uri=nl.zelfstroom.app://callback&response_mode=form_post&state=30906730-14d1-4083-ac3b-b763dd528acd&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=S256");
    String LocationUrl = null;
    Map<String, String> LoginCookies;
    
	
	@Test(priority = 1)
	public void loginPost() {
		RestAssured.baseURI = BaseUrl;

		Response res = RestAssured.given()
				.redirects().max(12).redirects().follow(true).
				param("button", "login").
				param("Username", "Han").
				param("Password", "Vermolen").
				param("ReturnUrl", ReturnUrl).
			when()
				.post("/account/login").then().assertThat().statusCode(302).extract().response(); // Expected status code is "302", URL will redirect and set to callback url
		
		String responseStringLogin = res.asString();
		System.out.println(responseStringLogin);
		
		LoginCookies = res.getCookies();
		
//		RestAssured.requestSpecification = new RequestSpecBuilder().build();
//		RestAssured.given(); 
//		
//		RestAssured.requestSpecification = new RequestSpecBuilder().addCookies(LoginCookies).build();
		
		System.out.println("login post status code" + res.statusCode());																						
		LocationUrl = res.getHeader("Location");
		System.out.println(LocationUrl);
		
//		String result = java.net.URLDecoder.decode(LocationUrl);
//		System.out.println(result);

		Response res1 = RestAssured.given()
				.redirects().max(12).redirects().follow(true)
				.when().get(LocationUrl)
		
				.then().assertThat().statusCode(200).extract().response(); // This call will  simply return  the Login 	Page.
		  
		
		for (Header header : res1.getHeaders()) {
			System.out.println(header.getName() + " : "+ header.getValue());
		}
		System.out.println(LoginCookies);
		
		String responseString = res1.asString();
		System.out.println("generateCode status" + res1.statusCode());
		System.out.println(responseString);
		
		
		
		
		Response res2 = given()
				.cookies(LoginCookies)
				.param("Name" , "Token Issued Success")
				.param("Category", "Token")
				.param("EventType", "Success")
				.param("RedirectUri" , "nl.zelfstroom.app://callback")
				.param("Endpoint", "Authorize")
				.param("SubjectId", "d4f662cb-d185-441d-acec-a16789d4197d")
				.param("Scopes" , "openid profile roles gateway_rights userId offline_access")
				.when().get("/connect/authorize/callback?client_id=zelfstroomapp&scope=openid%20profile%20roles%20gateway_rights%20offline_access%20userId&response_type=code&redirect_uri=nl.zelfstroom.app%3A%2F%2Fcallback&response_mode=form_post&state=30906730-14d1-4083-ac3b-b763dd528acd&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=S256")
				.then().assertThat().statusCode(200).extract().response(); 
		
	}

//	@Test(priority = 3)
	public void generateCode() {
		
		// using for-each loop for iteration over Map.entrySet() 
        for (Map.Entry<String,String> entry : LoginCookies.entrySet())  
            System.out.println("Key = " + entry.getKey() + 
                             ", Value = " + entry.getValue()); 
        
		RestAssured.baseURI = BaseUrl;

		Response res = given()
				.cookies(LoginCookies)
				.when().get("/connect/authorize/callback?client_id=zelfstroomapp&scope=openid%20profile%20roles%20gateway_rights%20offline_access%20userId&response_type=code&redirect_uri=nl.zelfstroom.app%3A%2F%2Fcallback&response_mode=form_post&state=30906730-14d1-4083-ac3b-b763dd528acd&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=S256")
				.then().assertThat().statusCode(200).extract().response(); 
		
		
		
		String responseString = res.asString();
		System.out.println("generateCode status" + res.statusCode());
		System.out.println(responseString);
	}
	
//	//@Test 
//	public void generateCode() {
//		// TODO Auto-generated method stub
//		
//		
//			  given().
//			      expect().
//			      statusCode(200).
//			      body(
//			       "email", equalTo("test@hascode.com"),
//			       "firstName", equalTo("Tim"),
//			       "lastName", equalTo("Testerman"),
//			       "id", equalTo("1")).
//			    when().
//			      get("/service/single-user");
//			}
		
		
		
		
	

	//@Test(priority = 4)
	public void makingAuthresquest  () { // Sending Payloads to generate "id_token" , "access_token" , "refresh_token"
									// while making POST request.
		RestAssured.baseURI = "http://35.157.221.79:5000";

		// Task - 1 Grab The Response
		Response res = given().param("client_id", "zelfstroomapp"). // Incorrect Client_id
				param("client_secret", "rhBNDktLtn4b6l9WTgmtzCvlUAPgFC")
				.param("code", "1bcaca38b264e154f8410d2c2ec08017283b19afbd055060e093e5207237fe71")
				.param("redirect_uri", "nl.zelfstroom.app://callback").param("grant_type", "authorization_code")
				.param("refresh_token",
						"a1f25a033945372b2e201c9417433e2c3fe31fb7fdfa442e353cd9c9eff6ffa6, parameterValues")
				.param("code_verifier", "M25iVXpKU3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag").when()
				.post("/connect/token").then().assertThat().statusCode(400).extract().response();

		// Task-2 Grab the values from Response
		String responseString = res.asString();
		System.out.println(responseString);

		// Task-3 getting the bodies from jason Response
		JsonPath js = new JsonPath(responseString);
		String errorMsg = js.get("error");
		System.out.println("This is the Alert Message:" + errorMsg);
	}

}
